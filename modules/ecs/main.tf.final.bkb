resource "aws_ecs_cluster" "project_cluster" {
  name = "project-cluster"
}
resource "aws_iam_role" "iam_role" {
  name = "iam-role"
  assume_role_policy = data.aws_iam_policy_document.sts_ecs.json
}
data "aws_iam_policy_document" "sts_ecs" {
    statement {
    sid = "STSassumeRole"
    effect = "Allow"
    actions = ["sts:AssumeRole"]
    principals {
      type = "Service"
      identifiers = ["ecs-tasks.amazonaws.com"]
    }
  }
}
data "aws_iam_policy_document" "policy_doc" {
  statement {
      effect= "Allow"
      actions= ["*"]
      resources= [
        "arn:aws:logs:*:*:*",
        "arn:aws:rds:us-east-1:639483503131:db:reach-postgresql-default-20230212184103673800000001",
        "arn:aws:s3:::myawsbucket-639483503131"
    ]
  }
}
resource "aws_iam_policy" "iam_policy" {
        name = "iam-policy"
        policy = data.aws_iam_policy_document.policy_doc.json
}
resource "aws_iam_role_policy_attachment" "ecsTaskExecutionRole_policy" {
  role       = aws_iam_role.iam_role.name
  policy_arn = aws_iam_policy.iam_policy.arn
}

resource "aws_ecs_task_definition" "nodejs" {
  family = "nodejs"
  container_definitions = file("container_def.json")
  requires_compatibilities = ["FARGATE"]
  network_mode             = "awsvpc"
  memory                   = 2048
  cpu                      = 1024
  execution_role_arn       = aws_iam_role.iam_role.arn
}

resource "aws_ecs_service" "nodejs-service" {
  name            = "nodejs-service"
  cluster         = aws_ecs_cluster.project_cluster.id
  task_definition = aws_ecs_task_definition.nodejs.arn
  launch_type     = "FARGATE"
  desired_count   = 1

#load_balancer {
#    target_group_arn = aws_lb_target_group.backend-user.arn
#    container_name   = "backend-user"
#    container_port   = 8080 # Specifying the container port
#  }
load_balancer {
    target_group_arn = aws_lb_target_group.reverseproxy.arn
    container_name   = "reverseproxy"
    container_port   = 8080 # Specifying the container port
  }

  network_configuration {
    subnets          = var.vpc.public_subnets
    assign_public_ip = true
  }
}


resource "aws_lb_target_group" "backend-user" {
  name     = "backend-user"
  port     = 8080
  protocol = "HTTP"
  vpc_id   = var.vpc.vpc_id
}

resource "aws_lb_target_group" "backend-feed" {
  name     = "backend-feed"
  port     = 8080
  protocol = "HTTP"
  vpc_id   = var.vpc.vpc_id
}

resource "aws_lb_target_group" "reverseproxy" {
  name     = "reverseproxy"
  port     = 8080
  protocol = "HTTP"
  vpc_id   = var.vpc.vpc_id
}


resource "aws_lb_listener" "reverseproxy" {
    load_balancer_arn = aws_lb.alb.arn
    port              = "8080"
    protocol          = "HTTP"

    default_action {
      type             = "forward"
      target_group_arn = aws_lb_target_group.reverseproxy.arn
    }
  }

resource "aws_lb_listener_rule" "backend-user" {
  listener_arn = aws_lb_listener.reverseproxy.arn

  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.backend-user.arn
  }

  condition {
    path_pattern {
      values = ["/api/v0/users"]
    }
  }
}

resource "aws_lb_listener_rule" "backend-feed" {
  listener_arn = aws_lb_listener.reverseproxy.arn

  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.backend-feed.arn
  }

  condition {
    path_pattern {
      values = ["/api/v0/feed"]
    }
  }
}

resource "aws_lb" "alb" {
  name               = "alb"
  load_balancer_type = "application"
  security_groups    = [var.sg.lb]
  subnets            = var.vpc.public_subnets
}

